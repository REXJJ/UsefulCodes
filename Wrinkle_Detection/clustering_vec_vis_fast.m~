clc;
clear;
close all;
warning off;
global vlen vlenm vden sc clus;
D = '/home/rex/Desktop/TestData2';
S = dir(fullfile(D,'*.png'));
length(S);
global u tot per;
fig = uifigure;

sldlm=uislider(fig);
sldlm.Limits=[0 100];
sldlm.Position = [81,350,419,20];


txl = uilabel(fig);
txl.Text='Max';
txl.FontSize=12;
txl.Position = [81,360,200,15];


sldl=uislider(fig);
sldl.Limits=[0 100];
sldl.Position = [81,250,419,20];


txlm = uilabel(fig);
txlm.Text='Min';
txlm.FontSize=12;
txlm.Position = [81,260,200,15];


sldd=uislider(fig);
sldd.Limits=[1 31];
sldd.Position = [81,150,419,20];


txld = uilabel(fig);
txld.Text='Scale';
txld.FontSize=12;
txld.Position = [81,60,200,15];

sldsc=uislider(fig);
sldsc.Limits=[0 20];
sldsc.Position = [81,50,419,20];


txld = uilabel(fig);
txld.Text='Density';
txld.FontSize=12;
txld.Position = [81,160,200,15];

vlen=90;
vlenm=95;
vden =1;
sc=1;
sldsc.Value=sc;
sldl.Value=vlen;
sldlm.Value=vlenm;
sldd.Value=vden;


global map ind an  ln;
map=zeros(1000,1000);
an=zeros(1000,1000);
ind=zeros(1000,1000);
ln=zeros(1000,1000);



for k = 1:numel(S)
    disp(k);
    F = fullfile(D,S(k).name);
    I = imread(F);
    I=rgb2gray(I);
     I = medfilt2(I,[5,5]);
    [l,a,gx,gy]=getgradient(I);
    sldd.ValueChangedFcn = @(sldd,event) update(sldd,I,gx,gy,2);
    sldl.ValueChangedFcn = @(sldl,event) update(sldl,I,gx,gy,0);
    sldlm.ValueChangedFcn = @(sldlm,event) update(sldlm,I,gx,gy,1);
    sldsc.ValueChangedFcn = @(sldlm,event) update(sldsc,I,gx,gy,3);
    ll=floor(l*100);
    ll=ll(:);
%     u=unique(ll);
%     u=sort(u);
    tot=zeros(size(u));
%     parfor i=1:length(u)
%         for j=1:size(l,1)
%             for k=1:size(l,2)
%                 tot(i)=tot(i)+(ll(j,k)==u(i));
%             end
%         end
%     end
%     per=zeros(size(u));
%     for i=1:length(u)
%         per(i)=percentage(u(i));
%     end

per=zeros(100000,1);
bins=100000;
for i=1:size(ll,1)
    if ll(i)>=bins
        continue;
    end
    per(floor(ll(i))+1)=per(floor(ll(i))+1)+1;
end

for i=2:size(ll,1)
    per(i)=per(i-1)+per(i);
end


    vector_display(I,gx,gy,vlen,vlenm,vden,sc);
    
%     figure(4);
%     imshow(I);
%     figure(4)
%     subplot(1,2,1);
%     [g,dir,gx,gy]=getgradient(I);
%     display_image(gx);
%     subplot(1,2,2)
%     display_image(gy);
    figure(6);
    display_image(l);
    w = waitforbuttonpress;
    %S(k).data = I; % optional, save data.
end


function p=percentage(pt)
% global u tot;
% index=find(u==pt);
% if length(index)==0
%     p=0;
% else
% p=(tot(index)*100000.0/sum(tot))/1000.0;
% end
global per;
p= per(floor(per*100)+1);
end

function p=percentile(pt)
pt=floor(pt*100);
global u per;
sum=0;
i=1;
while i<length(u) && u(i) <=pt
    sum=sum+per(i);
    i=i+1;
end
p=sum;
end

function vector_display(I,Gx,Gy,len,lenm,step,sc)
    len
    lenm
    im=im2double(I);
    im=double(im);
    [nr,nc]=size(im);
    [mag,dir] = imgradient(Gx,Gy);
    [x,y]=meshgrid(1:step:nc,1:step:nr);
    u=Gx(1:step:end,1:step:end);
    v=Gy(1:step:end,1:step:end);
    l=sqrt(u.^2+v.^2);
    count=1;
    global clus;
    clus=zeros(size(l,1),6);
    c=1;
    for i=1:size(l,1)
        for j=1:size(l,2)
            mag(i,j)
            p=percentile(mag(i,j));
            if p>lenm || p<len
                 l(i,j)=0;
            else
                clus(count,:)=[i,j,Gx(i,j),Gy(i,j),mag(i,j),dir(i,j)]
                count=count+1;
            end
            c=c+1;
        end
    end

%     figure(5)
%     close;
%     imshow(im);
%     alpha(0.8);   
%     hold on;
%     quiver(x(l>0),y(l>0),u(l>0),v(l>0),sc)
%     disp("Processed");
%     hold off;
    m=clus;
    disp("Clustering");
    global map an ind ln;
    for i=1:size(m,1)
    map(m(i,1),m(i,2))=1;
    an(m(i,1),m(i,2))=m(i,6);
    ln(m(i,1),m(i,2))=m(i,5);
    ind(m(i,1),m(i,2))=i;
    end
    
c=cluster(m);
tc=unique(c);


figure(7)
 imshow(im);
 alpha(0.8);
 hold on;
%  for i=1:size(tc,1)
%     xt=[];
%     yt=[];
%     lt=[];
%     at=[];
%      if tc(i)==0
%          continue;
%      end
%      disp("Visualizing clusters");
%      i
%     ids=find(c==tc(i));
%     xt=m(ids,1);
%     yt=m(ids,2);
%     ut=m(ids,3);
%     vt=m(ids,4);
%     quiver(yt,xt,ut,vt,sc);
%  end
%     hold off;
 ids=find(c>0);
 xt=m(ids,1);
 yt=m(ids,2);
 scatter(yt,xt,'.');
 hold off;

    disp("Visualizing done");
    figure(11)
    gscatter(m(:,2),m(:,1),c);

end

function display_image(im)
    imshow(im, [min(im(:)) max(im(:))])
end

function [x,y]=calc_gradient_cell(a,ksize)
sumx1=mean2(a(:,1:floor(ksize/2)));
sumx2=mean2(a(:,ceil(ksize/2)+1:ksize));
sumy1=mean2(a(1:floor(ksize/2),:));
sumy2=mean2(a(ceil(ksize/2)+1:ksize,:));
x=(sumx2-sumx1);
y=(sumy2-sumy1);
end


function [gx,gy]=calc_gradient(im,ksize)
    a0 = im;
    gx=zeros(size(im));
    gy=zeros(size(im));
    n=ksize*ksize;
    step=floor(ksize/2);
    parfor r=step+1:size(a0,1)-step
        v0=zeros(size(a0(r,:)));
        v1=zeros(size(a0(r,:)));
        for c=step+1:size(a0,2)-step
            [lx,ly]=calc_gradient_cell((a0(r-step:r+step,c-step:c+step)),5);
            v0(c)=lx;
            v1(c)=ly;           
        end
        gx(r,:)=v0;
        gy(r,:)=v1;
   end
end


function [mag,dir,gx,gy] = getgradient(im)
    [gx,gy] = calc_gradient(im,5);
    %[gx,gy] = imgradientxy(im,"prewitt");
    [mag,dir] = imgradient(gx,gy);
end


function update(sldl,I,Gx,Gy,id)
global vlen vden vlenm sc;
if id==0
vlen=floor(sldl.Value);
sldl.Value=vlen;
end
if id==1
vlenm=floor(sldl.Value);
sldl.Value=vlenm;
end
if id==2
vden=floor(sldl.Value);
sldl.Value=vden;
end
if id==3
sc=floor(sldl.Value);
sldl.Value=sc;
end
vector_display(I,Gx,Gy,vlen,vlenm,vden,sc);
end

function t=find_neighbor(i,j,A,l)
global map an ln;
checked=[i,j];
k=1;
t=[];
step=2;
while k<=size(checked,1)
    x=checked(k,1);
    y=checked(k,2);
    if map(x,y)==0
        k=k+1;
        continue;
    end
      t=[t;[x,y]];
        A=an(x,y);
        l=ln(x,y);

    k=k+1;
    map(x,y)=0;
for a=-step:step
    for b=-step:step
        if a==0&&b==0
            continue;
        end
        if x+a>900||y+b>900||x+a<1||y+b<1||map(x+a,y+b)==0||abs(an(x+a,y+b)-A)>20||abs(l-ln(x+a,y+b))/(l+ln(x+a,y+b))>0.20
        continue;
        end
        checked=[checked;[x+a,y+b]];
    end
end
end
end    



function id=find_unclassified(start,unclassified)
for i=start:size(unclassified,1)
    if unclassified(i)==1
        id=i;
        return;
    end
end
id=0;
end


function c=cluster(m)
global map m_o ref ind;
unclassified=ones(size(m,1),1);
class=zeros(size(m,1),1);
class_no=1;
start=1;
while 1
    it=find_unclassified(start,unclassified);
    start=it;
    if it==0
        break;
    end
    i=m(it,1);
    j=m(it,2);
    A=m(it,6);
    l=m(it,5);

    t=find_neighbor(i,j,A,l);
    points=0;
    ids=[];
    for i=1:size(t,1)
        id=ind(t(i,1),t(i,2));
        ids=[ids;id];
        unclassified(id)=0;
        points=points+1;
    end
        if points>50
          class(ids)=class_no;
          class_no=class_no+1;
        elseif points>10
          pt=transpose(t);
          if rank(t(2:end,:) - t(1,:)) ~= 1
          rt=minBoundingBox(pt);
          lenght=norm(rt(:,1)-rt(:,2));
          breadth=norm(rt(:,2)-rt(:,3));
          aspect_ratio=max(lenght,breadth)/min(lenght,breadth);
          if aspect_ratio>4
%               disp("Bounding box checking");
              class(ids)=class_no;
              class_no=class_no+1;
          end
          end
        end
%     if class_no==148
%         ref=t;
%             end

end
c=class;
end